root.recipe("time_track", TargetType.Executable, fun(r){
    r.add("src", "time_track/**.cpp")
    r.add("src", "time_track/**.hpp")
    r.depends_on("termcolor")

    for (e: ["std", "io", "algo"]) { r.depends_on("gubg/${e}/func") }
    })

root.recipe("pa", TargetType.Executable, fun(r){
    r.add("src", "pa/**.cpp")
    r.add("src", "pa/**.hpp")

    for (e: ["std", "io", "algo"]) { r.depends_on("gubg/${e}/func") }
    r.depends_on("chai/func")

    if (my(OS) == OS.Linux){
        r.library("dl")
        r.library("pthread")
    }
    })

root.recipe("pit", TargetType.Executable, fun(r){
    r.add("src", "pit/**.cpp")
    r.add("src", "pit/**.hpp")
    for (e: ["std", "io", "algo"]) { r.depends_on("gubg/${e}/func") }
    })

root.book("org", fun(b){
    b.recipe("func", fun(r){
        r.add("src", "org/**.[hc]pp")
        r.remove("src", "org/main.cpp")
        for (e: ["std", "io", "algo"]) { r.depends_on("gubg/${e}/func") }
        r.depends_on("nlohmann/json")
        })
    b.recipe("app", TargetType.Executable, fun(r){
        r.name = "org";
        r.depends_on("func");
        r.add("src", "org/main.cpp")
        })
    b.recipe("ut", TargetType.Executable, fun(rcp){
        rcp.add("test/src", "org/**.cpp")
        rcp.depends_on("func")
        rcp.depends_on("catch/main")
        })
    })

root.recipe("pigr", TargetType.Executable, fun(r){
    r.add("src", "pigr/**.cpp")
    r.add("src", "pigr/**.hpp")
    for (e: ["std", "io", "algo"]) { r.depends_on("gubg/${e}/func") }
    })
